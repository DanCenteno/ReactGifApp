{"version":3,"sources":["componentes/GifAdd.js","helpers/GetGifs.js","componentes/GifItem.js","componentes/GifImage.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["GifAdd","setCategories","useState","valueinput","setValueInput","onSubmit","e","preventDefault","trim","length","cats","console","log","type","value","onChange","target","getGif","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifItem","className","src","GifImage","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAEaA,EAAS,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAGHC,mBAAS,IAHN,mBAGhCC,EAHgC,KAGpBC,EAHoB,KAoBvC,OACI,cAAC,WAAD,UACI,sBAAMC,SAjBY,SAACC,GACvBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAc,SAAAS,GAAI,4BAAQA,GAAR,CAAaP,OAC/BC,EAAc,IACdO,QAAQC,IAAI,kBAYR,SACI,uBACAC,KAAK,OACLC,MAAOX,EACPY,SAXS,SAACT,GAClBF,EAAcE,EAAEU,OAAOF,e,+BClBlBG,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAERC,EAFQ,iDAEwCC,UAAUH,GAFlD,+DAGKI,MAAMF,GAHX,cAGRG,EAHQ,gBAIOA,EAAKC,OAJZ,uBAIPC,EAJO,EAIPA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC9B,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVxB,kBAaPM,GAbO,4CAAH,sDCENO,EAAU,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAC3B,OACI,sBAAKc,UAAU,qCAAf,UAEQ,6BAAKJ,IACL,qBAAKK,IAAKf,QCFbgB,EAAW,SAAC,GAAgB,IAAflB,EAAc,EAAdA,SAAc,ECFZ,SAACA,GAAc,IAAD,EACZhB,mBAAS,CAC/BuB,KAAM,GACNY,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAmBtC,OAXAC,qBAAU,WACNvB,EAAOC,GAAUuB,MAAK,SAAAC,GAAI,OACtBC,YAAW,WACPhC,QAAQC,IAAI8B,GACZH,EAAS,CACLd,KAAKiB,EACLL,SAAQ,MAEb,UACT,CAACnB,IAEIoB,EDdeM,CAAa1B,GAA7BO,EAH8B,EAG9BA,KAAKY,EAHyB,EAGzBA,QASX,OARA1B,QAAQC,IAAIyB,GASR,gCAGM,6BAAKnB,IAIPmB,EAAU,cAAgB,eAGvBZ,EAAKE,KAAI,SAACC,GACP,OAAO,cAAC,EAAD,eAA0BA,GAAZA,EAAIC,WEzB9BgB,EAAe,WAAO,IAAD,EAEM3C,mBAAS,CAAC,QAAQ,QAAQ,UAAU,WAF1C,mBAEvB4C,EAFuB,KAEX7C,EAFW,KAa9B,OAEI,eAAC,WAAD,WACI,2CACA,uBACD,cAAC,EAAD,CAAQA,cAAeA,IAGtB6C,EAAWnB,KAAI,SAAAT,GACX,OAAO,cAAC,EAAD,CAAyBA,SAAUA,GAApBA,UCrBtC6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2c58371a.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react'\r\n\r\nexport const GifAdd = ({setCategories}) => {\r\n    \r\n    \r\n    const [valueinput, setValueInput] = useState('');\r\n    \r\n    const handleAddCategory = (e) => {\r\n        e.preventDefault();\r\n        if(valueinput.trim().length > 2){\r\n        setCategories(cats => [...cats,valueinput]);\r\n        setValueInput('');\r\n        console.log('submit hecho');    \r\n        }\r\n        \r\n    }\r\n    \r\n    const handleChange = (e) => {\r\n        setValueInput(e.target.value);\r\n        \r\n    }\r\n    \r\n    return (\r\n        <Fragment>\r\n            <form onSubmit={handleAddCategory}>\r\n                <input\r\n                type=\"text\"\r\n                value={valueinput}\r\n                onChange={handleChange}\r\n                >\r\n                </input>\r\n            </form>\r\n        </Fragment>\r\n    )\r\n}\r\n","export const getGif = async (category) => {\r\n    \r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=sEkISyHwBEjeQrW48LV7iiKG4r1vISyq`;\r\n        const resp = await fetch(url);\r\n        const {data} = await resp.json();\r\n        \r\n        const gifs = data.map( img => {\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    }) \r\n        return gifs;\r\n    }\r\n    ","import React from 'react'\r\n\r\nexport const GifItem = ({title,url}) => {\r\n    return (\r\n        <div className=\"animate__animated animate__bounce \">\r\n            \r\n                <li>{title}</li>\r\n                <img src={url}/>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifItem } from './GifItem';\r\n//import { getGif, GetGifs } from '../helpers/GetGifs';\r\n\r\nexport const GifImage = ({category}) => {\r\n    \r\n   // const [images, setImages] = useState([]);\r\n   const {data,loading} = useFetchGifs(category);\r\n    console.log(loading);\r\n \r\n    \r\n    \r\n    \r\n    \r\n   // getGif();\r\n    \r\n    return (\r\n        <div>\r\n           \r\n           {\r\n              <li>{category}</li>\r\n              \r\n           }      \r\n           \r\n           {loading ? 'Cargando...' : 'Data cargada'}\r\n           \r\n           {\r\n               data.map((img) => {\r\n                  return <GifItem key={img.id} {...img}/>\r\n              })\r\n            }      \r\n            \r\n        </div>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGif } from \"../helpers/GetGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n    \r\n      //cuando el componente es renderizado por primera vez  \r\n    \r\n    useEffect(()=>{\r\n        getGif(category).then(imgs => \r\n            setTimeout(() => {\r\n                console.log(imgs);\r\n                setState({\r\n                    data:imgs,\r\n                    loading:false\r\n                })\r\n            }, 3000));\r\n    },[category])\r\n        \r\n    return state;//{data:[], loading: true};\r\n}\r\n","import React, { Fragment, useState } from 'react'\r\nimport { GifAdd } from './componentes/GifAdd';\r\nimport { GifImage } from './componentes/GifImage';\r\n\r\nexport const GifExpertApp = () => {\r\n    \r\n    const [categories, setCategories] = useState(['Aries','Tauro','Geminis','Cancer']);\r\n    \r\n     \r\n    const cat = 'Leo';\r\n     \r\n    const handleAdd= () => {\r\n        \r\n        setCategories([...categories,'cat']);\r\n        \r\n    }\r\n     \r\n    return (\r\n        \r\n        <Fragment>\r\n            <h2>GifExpert</h2>\r\n            <hr/>\r\n           <GifAdd setCategories={setCategories}/>\r\n           \r\n            {\r\n            categories.map(category => {\r\n                return <GifImage key={category} category={category}/>\r\n                //return <li key={category}>{category}</li>\r\n            })\r\n            \r\n            }\r\n        </Fragment>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from './GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}